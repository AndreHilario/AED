#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int arr[], int left, int middle, int right) {
    int i, j, k;
    int n1 = middle - left + 1;
    int n2 = right - middle;

    // cria arrays temporários
    int L[n1], R[n2];

    // copia os dados para os arrays temporários L e R
    for (i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[middle + 1 + j];
    }

    // combina os arrays temporários de volta em arr[l..r]
    i = 0; // índice inicial do primeiro subarray
    j = 0; // índice inicial do segundo subarray
    k = left; // índice inicial do array combinado
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // copia os elementos restantes de L[] se houver algum
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // copia os elementos restantes de R[] se houver algum
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;

        // ordena as metades esquerda e direita
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);

        // combina as duas metades ordenadas
        merge(arr, left, middle, right);
    }
}

int main() {
    int n = 20000; // tamanho do array
    int arr[n];

    // preenche o array com números aleatórios
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100;
    }

    clock_t start = clock();
    mergeSort(arr, 0, n-1); // chama a função de ordenação
    clock_t end = clock();
    double time_taken = (double)(end - start) / CLOCKS_PER_SEC;

    // imprime o array ordenado
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    printf("\nTempo de execução: %f segundos", time_taken);
    return 0;
}