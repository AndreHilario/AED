#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

Node* insert(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}

void preorder(Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void inorder(Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void postorder(Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    int num_cases, i;
    scanf("%d", &num_cases);

    for (i = 0; i < num_cases; i++) {
        int n, j, value;
        scanf("%d", &n);

        Node* root = NULL;
        for (j = 0; j < n; j++) {
            scanf("%d", &value);
            root = insert(root, value);
        }

        printf("Case %d:\n", i + 1);
        printf("Pre.: ");
        preorder(root);
        printf("\nIn..: ");
        inorder(root);
        printf("\nPost: ");
        postorder(root);
        printf("\n\n");

        freeTree(root);
    }

    return 0;
}