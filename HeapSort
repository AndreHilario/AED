#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void heapify(int arr[], int n, int i) {
    int largest = i; // Inicializa o maior como raiz
    int l = 2*i + 1; // Esquerda = 2*i + 1
    int r = 2*i + 2; // Direita = 2*i + 2
 
    // Se o filho esquerdo for maior que a raiz
    if (l < n && arr[l] > arr[largest])
        largest = l;
 
    // Se o filho direito for maior que o maior até agora
    if (r < n && arr[r] > arr[largest])
        largest = r;
 
    // Se o maior não é a raiz
    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
 
        // Recursivamente, para o subárvore afetado
        heapify(arr, n, largest);
    }
}
 
void heapSort(int arr[], int n) {
    // Constrói uma heap (rearranja array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
 
    // Extrai um por um os elementos da heap
    for (int i=n-1; i>=0; i--) {
        // Move a raiz atual para o fim
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
 
        // chama max heapify na heap reduzido
        heapify(arr, i, 0);
    }
}

int main() {
    int n;
    printf("Digite o tamanho do array: ");
    scanf("%d", &n);
    int arr[n];
    srand(time(NULL)); // inicializa a semente do gerador de números aleatórios
    printf("Array gerado aleatoriamente: ");
    for(int i=0; i<n; i++){
        arr[i] = rand() % 101; // gera um número aleatório entre 0 e 100
        printf("%d ", arr[i]);
    }
    
    clock_t t1, t2;
    t1 = clock();
    
    heapSort(arr, n);
    
    t2 = clock();
    
    printf("\nArray ordenado: ");
    for(int i=0; i<n; i++){
        printf("%d ", arr[i]);
    }
    
    double tempo_execucao = (double) (t2 - t1) / CLOCKS_PER_SEC;
    printf("\nTempo de execucao: %.4f segundos", tempo_execucao);
    
    return 0;
}